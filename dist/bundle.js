/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/uuid/index.js":
/*!************************************!*\
  !*** ./node_modules/uuid/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var v1 = __webpack_require__(/*! ./v1 */ \"./node_modules/uuid/v1.js\");\nvar v4 = __webpack_require__(/*! ./v4 */ \"./node_modules/uuid/v4.js\");\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/index.js?");

/***/ }),

/***/ "./node_modules/uuid/lib/bytesToUuid.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/bytesToUuid.js ***!
  \**********************************************/
/***/ ((module) => {

eval("/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/lib/bytesToUuid.js?");

/***/ }),

/***/ "./node_modules/uuid/lib/rng-browser.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/rng-browser.js ***!
  \**********************************************/
/***/ ((module) => {

eval("// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\n\n//# sourceURL=webpack:///./node_modules/uuid/lib/rng-browser.js?");

/***/ }),

/***/ "./node_modules/uuid/v1.js":
/*!*********************************!*\
  !*** ./node_modules/uuid/v1.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var rng = __webpack_require__(/*! ./lib/rng */ \"./node_modules/uuid/lib/rng-browser.js\");\nvar bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/uuid/lib/bytesToUuid.js\");\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/v1.js?");

/***/ }),

/***/ "./node_modules/uuid/v4.js":
/*!*********************************!*\
  !*** ./node_modules/uuid/v4.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var rng = __webpack_require__(/*! ./lib/rng */ \"./node_modules/uuid/lib/rng-browser.js\");\nvar bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/uuid/lib/bytesToUuid.js\");\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n\n//# sourceURL=webpack:///./node_modules/uuid/v4.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const Simulation = __webpack_require__(/*! ./simulation */ \"./src/simulation.js\");\r\nconst TEMPLATES = __webpack_require__(/*! ./templates */ \"./src/templates.js\");\r\nvar simulations = [];\r\n// s.init();\r\n// addEventListener('resize', () => s.size())\r\n\r\nconst playBtn = document.getElementById('play');\r\nconst pauseBtn = document.getElementById('pause');\r\n\r\n\r\nplayBtn.addEventListener('click', ()=>{\r\n    simulations.forEach(s=>s.play())\r\n});\r\npauseBtn.addEventListener('click', ()=> {\r\n    simulations.forEach(s=>s.pause())\r\n});\r\n\r\nsimulations.push(TEMPLATES[0]())\r\nsimulations.push(TEMPLATES[1]())\r\nsimulations.push(TEMPLATES[2]())\r\nsimulations.push(TEMPLATES[3]())\r\nsimulations.push(TEMPLATES[4]())\r\nsimulations.push(TEMPLATES[5]())\r\nsimulations.push(TEMPLATES[6]())\r\nsimulations.push(TEMPLATES[7]())\r\n\r\nconsole.log(simulations);\n\n//# sourceURL=webpack:///./src/main.js?");

/***/ }),

/***/ "./src/mover.js":
/*!**********************!*\
  !*** ./src/mover.js ***!
  \**********************/
/***/ ((module) => {

eval("module.exports = class Mover {\r\n    constructor(params={}) {\r\n        this._defaultParams = {\r\n            x:0,\r\n            y:0,\r\n            vx:0,\r\n            vy:0,\r\n            ax:0,\r\n            ay:0,\r\n        };\r\n\r\n        this._types = {\r\n            position: '',\r\n            speed: 'v',\r\n            acceleration: 'a'\r\n        }\r\n\r\n        Object.entries(this._defaultParams).forEach(([key, value])=>{\r\n            this[key] = params[key] ?? value;\r\n        })\r\n\r\n        // définition des setters/getters\r\n        Object.entries(this._types).forEach(([type, prefix])=>{\r\n            this[type] = function(coords={}) {\r\n                if(coords.x !== undefined) this[prefix+'x'] = coords.x;\r\n                if(coords.y !==undefined) this[prefix+'y'] = coords.y;\r\n                return {\r\n                    x: this[prefix+'x'],\r\n                    y: this[prefix+'y']\r\n                }\r\n                //  || this[prefix+'x'];\r\n                // this[prefix+'y'] = coords.y || this[prefix+'y'];\r\n            }\r\n        });\r\n    }\r\n\r\n    update() {\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    get getSpeed() {\r\n        return {x:this.vx, y:this.vy}\r\n    }\r\n\r\n    get nextPosition() {\r\n        return {\r\n            x: this.x + this.vx,\r\n            y: this.y + this.vy,\r\n        }\r\n    }\r\n\r\n    get nextSpeed() {\r\n        return {\r\n            x: this.vx + this.ax,\r\n            y: this.vy + this.ay,\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///./src/mover.js?");

/***/ }),

/***/ "./src/particle.js":
/*!*************************!*\
  !*** ./src/particle.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Mover = __webpack_require__(/*! ./mover */ \"./src/mover.js\");\r\nconst UTILS = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\r\nconst { v4: uuidv1 } = __webpack_require__(/*! uuid */ \"./node_modules/uuid/index.js\");\r\n\r\nmodule.exports = class Particle {\r\n    constructor(simulation, opts = {}) {\r\n        this.simulation = simulation;\r\n        this.ctx = this.simulation.context;\r\n        \r\n        this.uuid = uuidv1();\r\n        this.mass = opts.mass ?? 10; // kilos\r\n        this.density = opts.density ?? 1;\r\n        this.color = opts.color ?? 'black';\r\n        this.style = opts.style ?? 'fill';\r\n\r\n        // hauteur et largeur (mètres)\r\n        this.h = \r\n        this.w = this.mass * this.density;\r\n\r\n        this.coords = new Mover(opts.coords ?? {\r\n            vx:1,\r\n            vy:1\r\n        });\r\n    }\r\n\r\n    get v() { // valeur du vecteur vitesse\r\n        return Math.sqrt(this.vx**2 + this.vy**2);\r\n    }\r\n\r\n    get a() { // valeur du vecteur accélération\r\n        return Math.sqrt(this.ax**2 + this.ay**2);\r\n    }\r\n\r\n    get Ec() { // énegie cinétique\r\n        return 1/2 * this.mass * this.v**2\r\n    }\r\n\r\n    update() {\r\n        this.draw();\r\n        this.checkWallCollision();\r\n        // this.checkWallCollisionV2();\r\n        this.checkParticleCollision();\r\n        this.coords.update();\r\n    }\r\n\r\n    draw() {\r\n        this.ctx[this.style+'Style'] = this.color;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(\r\n            this.coords.x, // x\r\n            this.coords.y, // y\r\n            this.h,        // rayon\r\n            0,             // angle de départ de l'ac\r\n            2 * Math.PI    // angle de fin\r\n        );\r\n        this.ctx[this.style]();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    checkParticleCollision() {\r\n        // essai pour chaque particule\r\n        for(let i=0; i<this.simulation.particlesUUIDs.length; i++) {\r\n            let {mass, uuid, h,w,coords} = this.simulation.particles[this.simulation.particlesUUIDs[i]]; // coords de la particule\r\n            if(this.uuid === uuid) continue;\r\n            // d = sqrt( (Bx-Ax)² + (By-Ay)² )\r\n\r\n            // dessin du vecteur distance\r\n            if(this.simulation.showLines) {\r\n                UTILS.drawVect(this.ctx, this.coords, coords, {color:'gray'})\r\n            }\r\n             \r\n            if(this.simulation.showDirections) {\r\n                UTILS.drawVect(this.ctx, this.coords, {\r\n                    x: this.coords.x+this.coords.vx*30,\r\n                    y: this.coords.y+this.coords.vy*30,\r\n                }, {color:'black', width: 2})\r\n            }\r\n\r\n\r\n            // calcul des coordonnées du vecteur distance\r\n            let dx = this.coords.x-coords.x;\r\n            let dy = this.coords.y-coords.y;\r\n            let d = Math.abs(Math.sqrt(dx**2 + dy**2))\r\n            // si la distance séparant les deux points est inférieure ou égale au rayon des deux particules\r\n            // i.e: elle se touchent\r\n\r\n            const xVelocityDiff = this.coords.vx - coords.vx;\r\n            const yVelocityDiff = this.coords.vy - coords.vy;\r\n        \r\n            const xDist = coords.x - this.coords.x;\r\n            const yDist = coords.y - this.coords.y;\r\n\r\n            if (d <= this.w+w && xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\r\n                const angle = -Math.atan2(coords.y - this.coords.y, coords.x - this.coords.x);\r\n\r\n\r\n                const m1 = this.mass;\r\n                const m2 = mass;\r\n        \r\n                // Velocity before equation\r\n                const u1 = UTILS.rotate(this.coords.getSpeed, angle);\r\n                const u2 = UTILS.rotate(coords.getSpeed, angle);\r\n        \r\n                \r\n                // Velocity after 1d collision equation\r\n                const v1 = { \r\n                    x: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), \r\n                    y: u1.y \r\n                };\r\n                const v2 = { \r\n                    x: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), \r\n                    y: u2.y \r\n                };\r\n                \r\n        \r\n                // Final velocity after rotating axis back to original location\r\n                const vFinal1 = UTILS.rotate(v1, -angle);\r\n                const vFinal2 = UTILS.rotate(v2, -angle);\r\n        \r\n                // Swap this.coords velocities for realistic bounce effect\r\n                this.coords.speed({\r\n                    x: vFinal1.x,\r\n                    y: vFinal1.y\r\n                });\r\n        \r\n                coords.speed({\r\n                    x: vFinal2.x,\r\n                    y: vFinal2.y\r\n                });\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    checkWallCollision() {\r\n        // collision avec les bords\r\n\r\n        // en y, à droite\r\n        if( Math.ceil(this.coords.y+this.h) > this.simulation.h) {\r\n            this.coords.speed({\r\n                x: this.coords.vx,\r\n                y: -Math.abs(this.coords.vy)\r\n            });\r\n        }\r\n\r\n        // en y à gauche\r\n        if(Math.floor(this.coords.y-this.h) < 0) {\r\n            this.coords.speed({\r\n                x: this.coords.vx,\r\n                y: Math.abs(this.coords.vy)\r\n            });\r\n        } \r\n        \r\n        // en x, en bas\r\n        if(Math.ceil(this.coords.x+this.w) > this.simulation.w) {\r\n            this.coords.speed({\r\n                x: -Math.abs(this.coords.vx),\r\n                y: this.coords.vy\r\n            });  \r\n        }\r\n        \r\n        // en x, en haut\r\n        if(Math.floor(this.coords.x-this.w) < 0 ) {\r\n            this.coords.speed({\r\n                x: Math.abs(this.coords.vx),\r\n                y: this.coords.vy\r\n            });\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///./src/particle.js?");

/***/ }),

/***/ "./src/simulation.js":
/*!***************************!*\
  !*** ./src/simulation.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Particle = __webpack_require__(/*! ./particle */ \"./src/particle.js\");\r\n// const SupList = require('./supList');\r\nconst UTILS = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\r\nconst { v4: uuidv1 } = __webpack_require__(/*! uuid */ \"./node_modules/uuid/index.js\");\r\n\r\nmodule.exports = class Simulation {\r\n    constructor(opts = {}) {\r\n        this.showDirections = opts.showDirections ?? false;\r\n        this.showLines = opts.showLines ?? false;\r\n        this.h = opts.height ?? 300;\r\n        this.w = opts.width ?? 400;\r\n        this.toSummon = opts.toSummon ?? 10;\r\n        this.fps = opts.fps ?? 20;\r\n        this.particles = {};\r\n        this.particleOpts = opts.particleOpts ?? {\r\n            mass: 5\r\n        };\r\n        this.parent = opts.parent ?? document.body;\r\n        this.bg = opts.background ?? '#fefefe';\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.context = this.canvas.getContext(\"2d\");\r\n        this.canvas.classList.add(\"simulation\");\r\n        this.canvas.dataset.uuid = uuidv1();\r\n        this.canvas.style.background = this.bg;\r\n        this.parent.appendChild(this.canvas);\r\n\r\n        this.playing = opts.autoPlay ?? true;\r\n        this.t = 0;\r\n\r\n    }\r\n\r\n\r\n    get particlesUUIDs() {\r\n        return Object.keys(this.particles)\r\n    }\r\n    setFPS(fps) {\r\n        this.fps = fps;\r\n    }\r\n\r\n    size(height=this.h, width=this.w) {\r\n        this.h = height\r\n        this.w = width\r\n        this.init();\r\n    }\r\n\r\n    anim() {\r\n        // this.t +=1;\r\n        this.context.clearRect(0, 0, this.w, this.h);\r\n        for(let i=0; i<this.particlesUUIDs.length; i++) {\r\n            this.particles[this.particlesUUIDs[i]].update(this.t);\r\n        }\r\n        if(!this.playing) return;\r\n        this.animFrame = requestAnimationFrame(()=>this.anim());\r\n        // setTimeout(()=>this.anim(), 1000/this.fps);\r\n    }\r\n\r\n    init() {\r\n        cancelAnimationFrame(this.animFrame);\r\n        this.canvas.height = this.h;\r\n        this.canvas.width = this.w;\r\n        this.particles = {};\r\n        for(let i=0; i<this.toSummon; i++) {\r\n            this.addParticle();\r\n        }\r\n\r\n        this.anim();\r\n    }\r\n\r\n    addParticles(particles) {\r\n        for(let i=0; i<particles.length; i++) {\r\n            this.addParticle(particles[i]);\r\n        }\r\n    }\r\n    \r\n    addParticle(opts={}) {\r\n        let p = new Particle(this, {...this.particleOpts, ...opts});\r\n\r\n        if(!opts.coords) {        \r\n            p.coords.position({\r\n                x: UTILS.randomInt(p.h, this.w-p.h),\r\n                y: UTILS.randomInt(p.h, this.h-p.h),\r\n            });\r\n\r\n            p.coords.speed({\r\n                x: UTILS.randomInt(-2,2),\r\n                y: UTILS.randomInt(-2, 2),\r\n            });\r\n        }\r\n\r\n        this.particles[p.uuid] = p;\r\n    }\r\n\r\n    removeParticle(uuid) {\r\n        if(this.particles[uuid]) {\r\n            delete this.particles[uuid];\r\n        }\r\n    }\r\n\r\n    pause() { this.playing = false; }\r\n    play() { \r\n        if(this.playing) return;\r\n        this.playing = true; \r\n        this.anim() \r\n    }\r\n\r\n}\n\n//# sourceURL=webpack:///./src/simulation.js?");

/***/ }),

/***/ "./src/templates.js":
/*!**************************!*\
  !*** ./src/templates.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Simulation = __webpack_require__(/*! ./simulation.js */ \"./src/simulation.js\");\r\n\r\nmodule.exports = [\r\n\r\n    function(opts={}) {\r\n        let s= new Simulation({\r\n            // width: innerWidth,\r\n            // height: innerHeight,\r\n            parent: document.getElementById('watcher'),\r\n            toSummon:20,\r\n            fps: 70,\r\n            background: \"white\",\r\n            particleOpts: {\r\n                style: 'stroke',\r\n                color: \"#888\",\r\n                mass:35\r\n            },\r\n            ...opts\r\n            // autoPlay: false\r\n        });\r\n        s.init();\r\n        return s;\r\n    },\r\n\r\n    \r\n    function(opts={}) {\r\n        const initialV= {\r\n            x:0,\r\n            y:2\r\n        };\r\n        let s = new Simulation({\r\n            showDirections:true,\r\n            parent: document.getElementById('watcher'),\r\n            toSummon:0,\r\n            fps: 60,\r\n            particleOpts: {\r\n                color: \"red\",\r\n                mass: 50\r\n            },\r\n            ...opts\r\n        });\r\n        s.init();\r\n        \r\n        s.addParticles([{\r\n            color: \"#888\",\r\n            coords: {\r\n                y:100,\r\n                x:100,\r\n                vy: -initialV.y,\r\n            }\r\n        },\r\n        {\r\n            color: \"#eee\",\r\n            coords: {\r\n                y:s.h-100,\r\n                x:100,\r\n                vy: initialV.y,\r\n            }\r\n        },\r\n        {\r\n            color: \"#ccc\",\r\n            coords: {\r\n                y:100,\r\n                x:200,\r\n                vy: -initialV.y,\r\n            }\r\n        },\r\n        {\r\n            color: \"#aaa\",\r\n            coords: {\r\n                y:s.h-100,\r\n                x:210,\r\n                vy: initialV.y,\r\n            }\r\n        }]);\r\n\r\n        return s;\r\n    },\r\n\r\n\r\n    function(opts={}) {\r\n        const initialV= {\r\n            x:0,\r\n            y:2\r\n        };\r\n        let s = new Simulation({\r\n            debug:false,\r\n            parent: document.getElementById('watcher'),\r\n            toSummon:0,\r\n            fps: 60,\r\n            background: 'white',\r\n            particleOpts: {\r\n                // style: 'stroke',\r\n                mass: 30\r\n            },\r\n            ...opts\r\n        });\r\n        s.init();\r\n        \r\n        s.addParticles([{\r\n            color: \"#ccc\",\r\n            coords: {\r\n                y:(s.h+1)/2,\r\n                x:s.w/4,\r\n                vx: initialV.y,\r\n            }\r\n        },\r\n        {\r\n            color: \"#888\",\r\n            coords: {\r\n                y:(s.h-1)/2,\r\n                x:3*s.w/4,\r\n                vx: -initialV.y,\r\n            }\r\n        }]);\r\n\r\n        return s;\r\n    },\r\n\r\n\r\n\r\n    function(opts={}) {\r\n        const initialV= {\r\n            x:0,\r\n            y:2\r\n        };\r\n        let s = new Simulation({\r\n            debug:false,\r\n            parent: document.getElementById('watcher'),\r\n            toSummon:0,\r\n            fps: 60,\r\n            background: 'white',\r\n            particleOpts: {\r\n                color: \"#888\",\r\n                mass: 30\r\n            },\r\n            ...opts\r\n        });\r\n        s.init();\r\n        \r\n        s.addParticles([{\r\n            coords: {\r\n                y:s.h/2,\r\n                x:s.w/4,\r\n                vx: initialV.y,\r\n            }\r\n        },\r\n        {\r\n            coords: {\r\n                y:s.h/2,\r\n                x:s.w/2,\r\n                // vx: -initialV.y,\r\n            }\r\n        },\r\n        {\r\n            coords: {\r\n                y:s.h/2,\r\n                x:3*s.w/4,\r\n                // vx: -initialV.y,\r\n            }\r\n        }]);\r\n\r\n        return s;\r\n    },\r\n\r\n\r\n    function(opts={}) {\r\n        const initialV= {\r\n            x:0,\r\n            y:2\r\n        };\r\n        let s = new Simulation({\r\n            showLines:true,\r\n            parent: document.getElementById('watcher'),\r\n            toSummon:0,\r\n            fps: 60,\r\n            background: 'white',\r\n            particleOpts: {\r\n                // style: 'stroke',\r\n                mass: 30\r\n            },\r\n            ...opts\r\n        });\r\n        s.init();\r\n        \r\n        s.addParticles([{\r\n            color: \"#ccc\",\r\n            coords: {\r\n                y:(s.h+1)/2,\r\n                x:s.w/4,\r\n                vx: initialV.y,\r\n            }\r\n        },\r\n        {\r\n            color: \"#888\",\r\n            coords: {\r\n                y:(s.h-1)/2,\r\n                x:3*s.w/4,\r\n                vx: -initialV.y,\r\n            }\r\n        },\r\n        {\r\n            color: \"#888\",\r\n            coords: {\r\n                y:(s.h-1)/2,\r\n                x:3*s.w/4,\r\n                vx: -initialV.y,\r\n            }\r\n        }]);\r\n\r\n        return s;\r\n    },\r\n\r\n    \r\n    function(opts={}) {\r\n        let s= new Simulation({\r\n            // width: innerWidth,\r\n            // height: innerHeight,\r\n            parent: document.getElementById('watcher'),\r\n            toSummon:20,\r\n            fps: 70,\r\n            background: \"white\",\r\n            showLines:true,\r\n            particleOpts: {\r\n                style: 'stroke',\r\n                color: \"#888\",\r\n                mass:35\r\n            },\r\n            ...opts\r\n            // autoPlay: false\r\n        });\r\n        s.init();\r\n        return s;\r\n    },\r\n\r\n\r\n    function(opts={}) {\r\n        let s= new Simulation({\r\n            showLines: true,\r\n            parent: document.getElementById('watcher'),\r\n            toSummon:40,\r\n            fps: 70,\r\n            background: \"white\",\r\n            particleOpts: {\r\n                style:'stroke',\r\n                color: \"#888\",\r\n                mass:10\r\n            },\r\n            ...opts\r\n            // autoPlay: false\r\n        });\r\n        s.init();\r\n        return s;\r\n    },\r\n\r\n    \r\n    function(opts={}) {\r\n        let s= new Simulation({\r\n            // showLines: true,\r\n            parent: document.getElementById('watcher'),\r\n            toSummon:40,\r\n            fps: 70,\r\n            background: \"white\",\r\n            particleOpts: {\r\n                color: \"#888\",\r\n                mass:5\r\n            },\r\n            ...opts\r\n        });\r\n        s.init();\r\n        return s;\r\n    },\r\n\r\n];\n\n//# sourceURL=webpack:///./src/templates.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((module) => {

eval("module.exports = {\r\n\r\n    randomInt: function(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    },\r\n\r\n    randomFloat: function(min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    },\r\n\r\n    drawVect: function(ctx, cStart, cEnd, opts={}) {\r\n        ctx.strokeStyle=opts.color??'yellow';\r\n        ctx.lineWidth=opts.width??0.1;\r\n        ctx.beginPath();\r\n        ctx.moveTo(cStart.x, cStart.y);\r\n        ctx.lineTo(cEnd.x, cEnd.y);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    },\r\n\r\n    drawText: function(ctx, coords, text, opts={}) {\r\n        ctx.fillStyle=\"black\";\r\n        ctx.font = `${opts.size??'48px'} ${opts.font??'serif'}`;\r\n        ctx.fillText(text, coords.x, coords.y);\r\n    },\r\n\r\n    rotate: function(speed, angle) {\r\n        return {\r\n            x: speed.x * Math.cos(angle) - speed.y * Math.sin(angle),\r\n            y: speed.x * Math.sin(angle) + speed.y * Math.cos(angle)\r\n        };\r\n    }\r\n}\n\n//# sourceURL=webpack:///./src/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;